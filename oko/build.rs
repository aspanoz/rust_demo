use std::fs;
use std::io::{Result, Write};

static WEB_SOURCES: &'static str = "./www";
static RUST_WEB_TEMPLATE: &'static str = "src/app/web_view.rs";

fn generate_web_response() -> Result<()> {
   println!("cargo:rerun-if-changed={}/*", WEB_SOURCES);

   if fs::read_dir(WEB_SOURCES)?.next().is_none() {
      return Ok(());
   }

   let mut file = fs::File::create(RUST_WEB_TEMPLATE)?;

   writeln!(
      &mut file,
      r#"// this file was auto-generated by build.rs, source folder "{}""#,
      WEB_SOURCES
   )?;
   // writeln!(&mut file, "use lazy_static::lazy_static;\n")?;

   // writeln!(&mut file, "lazy_static! {{")?;
   writeln!(&mut file, " pub const INDEX_HTML: &str = r##\"")?;

   for entry in walkdir::WalkDir::new(WEB_SOURCES) {
      let entry = entry?;

      if !entry.file_type().is_file() {
         continue;
      }

      if let Ok(file_context) = fs::read_to_string(entry.path()) {
         writeln!(&mut file, "{}", file_context)?;
      };

      writeln!(&mut file, "\"##;")?;
   }

   // writeln!(&mut file, "}}")?;
   Ok(())
}

fn main() {
   if let Err(e) = generate_web_response() {
      eprintln!("Error: {}", e);
   }
}
